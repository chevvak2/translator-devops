pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build && answer-appraiser' }
    }
    triggers {
        pollSCM('H/2 * * * *')
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
    }
    environment {
        IMAGE_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/translator-answer-appraiser"
        KUBERNETES_BLUE_CLUSTER_NAME = "translator-eks-ci-blue-cluster"
        DEPLOY_ENV = "ci"
    }
    stages {
        stage('Checkout source code at build server') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Version') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/answer-appraiser/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps{
                script {
                    def image_meta = readYaml file: 'helm/answer-appraiser/ncats-images-meta.yaml'
                    env.ORIGINAL_REPO = image_meta.appraiser.image
                    env.BUILD_VERSION = image_meta.appraiser.version
                    currentBuild.displayName = image_meta.appraiser.version
                }
            }
        }
        stage('Build Image') {
            when {
                expression {
                    return !params.BUILD_VERSION
                }
            }
            steps {
                withEnv([
                    "IMAGE_NAME=853771734544.dkr.ecr.us-east-1.amazonaws.com/translator-answer-appraiser",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                ]) {
                    dir("helm/answer-appraiser") {
                        script {
                            sh '''
                                docker pull $ORIGINAL_REPO:$BUILD_VERSION
                                docker tag $ORIGINAL_REPO:$BUILD_VERSION $IMAGE_NAME
                               '''
                            def image = docker.image("$IMAGE_NAME:$BUILD_VERSION")
                            sh '''
                                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin  853771734544.dkr.ecr.us-east-1.amazonaws.com
                               '''
                            docker.image(env.IMAGE_NAME).push("${BUILD_VERSION}")
                        }
                    }
                }
            }
        }
        stage('Checkout source code at deploy server') {
            agent {
                label 'translator && ci && deploy'
            }
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Deploy to AWS EKS Blue') {
            agent {
                label 'translator && ci && deploy'
            }
            steps {            
                configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){
                    script {
                        sh '''
                        aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_BLUE_CLUSTER_NAME}
                        /bin/bash prepare.sh
                        cd helm/answer-appraiser
                        /bin/bash deploy.sh
                        '''
                    }
                }
            }
            post {
                always {
                    echo " Clean up the workspace in deploy node!"
                    cleanWs()
                }
            }
        }
    }
}
