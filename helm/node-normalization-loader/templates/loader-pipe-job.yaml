{{- if eq .Values.mode "restore" }}
{{- $fullName := include "node-normalization-loader.fullname" . -}}
{{- $codeDir := .Values.codeDir }}
{{- $dataDir := .Values.restore.dataDir }}
{{- $resources := .Values.resources }}
{{- $securityContext := .Values.securityContext }}
{{- $repository := .Values.restore.repository }}
{{- $tag := .Values.restore.tag }}
{{- $pullPolicy := .Values.restore.pullPolicy }}
{{- $ephemeralStorage := .Values.restore.ephemeralStorage }}
{{- range $dbName, $dbConf := .Values.redis_backend_config }}
{{- $dbKubeName := $dbName | replace "_" "-"}}
{{- $dataStorageSize := $dbConf.storageSize }}
{{- $connectionDetails := $dbConf.connectionDetails }}
{{- range $index, $host := $connectionDetails.hosts }}
{{- $hostName := $host.host_name }}
{{- $port := $host.port }}
{{- $sslEnabled := $connectionDetails.ssl_enabled }}
{{- $isCluster := $connectionDetails.is_cluster }}
{{- $redisPassword := $connectionDetails.password }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $fullName }}-pipe-job-{{ $dbKubeName }}-{{ $index }}"
spec:
  template:
    metadata:
      name: "{{ $fullName }}-pipe-job-{{ $dbKubeName }}-{{ $index }}"
    spec:
      containers:
        - name: loader-container
          image: "{{ $repository }}:{{ $tag }}"
          imagePullPolicy: {{ $pullPolicy }}
          command:
            - /bin/bash
          args:
            - {{ $codeDir }}/run_pipe.sh
          env:
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-secrets"
                  key: redis_password
                  optional: false
          volumeMounts:
            - mountPath:  {{ $codeDir }}/run_pipe.sh
              name: "loader-config"
              subPath: "run_pipe.sh"
            - mountPath: {{ $dataDir }}
              name: "data-dir"
          resources:
            {{ $resources | toYaml | nindent 12 }}
      restartPolicy: OnFailure
      {{ with $securityContext }}
      securityContext:
        {{ $securityContext | toYaml | nindent 8 }}
      {{ end }}
      {{- with $.Values.app.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.app.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: loader-config
          configMap:
            name: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-config"
            defaultMode: 0777
        - name: data-dir
          persistentVolumeClaim:
            claimName: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-loader-pvc"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-loader-pvc"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $dataStorageSize }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-config"
data:
  run_pipe.sh: |-
    #!/bin/bash
    set -v -x -e

    # Delete everything in the dataDir.
    rm -f "{{ $dataDir }}/{{ $dbName }}.rdb.gz"
    rm -f "{{ $dataDir }}/{{ $dbName }}.rdb"

    # Download the archive file.
    wget -nv -O "{{ $dataDir }}/{{ $dbName }}.rdb.gz" "{{ $dbConf.restoreURL }}"

    # Unzip the archive file.
    gunzip "{{ $dataDir }}/{{ $dbName }}.rdb.gz"

    # Restore the file into the specified database.
    # The `-c` option doesn't work in pipe mode, which is why we generate a ton of MOVED errors when we run this. The `grep -v MOVED` should suppress them
    # to avoid filling up the log.
    # Instead, what we will do is to get the list of cluster nodes and then stream ALL the data to ALL the nodes. Very inefficient, but it should get the job done.
    # Thanks to Yaphet for writing this code initially.
    sub_nodes=$(redis-cli {{ if $sslEnabled }}--tls{{ end }} -h  {{ $hostName }} -p {{ $port }} cluster nodes 2>&1 | grep "master" | awk '{ print $2}' | grep -v "Warning" | grep -v "Using")
    for node in $sub_nodes; do
      IFS=':' read -ra node_host_port <<< $node
      sub_host_name="${node_host_port[0]}"
      echo "... Started piping data to ${sub_host_name} as part of {{ $hostName }} ..." 
      rdb -c protocol "{{ $dataDir }}/{{ $dbName }}.rdb" | redis-cli {{ if $isCluster }}-c{{end}} -h ${sub_host_name} -p {{ $port }} --pipe {{ if $sslEnabled -}}--tls{{ end }} 2>&1 | grep -v MOVED
      echo "... Done piping data to ${sub_host_name} as part of {{ $hostName }} ..."
    done

    {{ if not $isCluster }}
    # Start a BGSAVE so the database is backed up to disk and ready to be loaded from if necessary.
    redis-cli -h {{ $hostName }} -p {{ $port }} {{ if $sslEnabled -}}--tls{{ end }} {{ if $isCluster }}-c{{end}} BGSAVE
    {{- end }}

    # Report success.
    echo "Completed restoring {{ $dbConf.restoreURL }} into {{ $dbName }} at {{ $hostName }}:{{ $port }}."
---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ $fullName }}-{{ $dbKubeName }}-{{ $index }}-secrets"
type: Opaque
stringData:
  redis_password: "{{ $redisPassword }}"
---
{{ end }}
{{ end }}
{{- end }}
